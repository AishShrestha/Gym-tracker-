// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  name           String
  email          String    @unique
  password       String
  profilePicture String // Modified to camelCase
  createdAt      DateTime  @default(now())
  status         Boolean   @default(false)
  updatedAt      DateTime  @updatedAt
  tracks         Track[]
  routines       Routine[]
  weight         Weight?
  otp            OTP[]
  facebookId     String?   @unique
  googleId       String?   @unique
}

model BodyPart {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  workouts Workout[]
}

model Workout {
  id         Int       @id @default(autoincrement())
  name       String
  bodyPart   BodyPart  @relation(fields: [bodyPartId], references: [id], onDelete: Cascade)
  bodyPartId Int
  tracks     Track[] // Renamed from Track
  Routine    Routine[]
}

model Track {
  id        Int      @id @default(autoincrement())
  set       Int
  rep       Int
  weight    Int?     @default(0)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Day {
  id       Int       @id @default(autoincrement())
  name     String
  routines Routine[]
}

model Routine {
  id        Int      @id @default(autoincrement())
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId Int
  day       Day      @relation(fields: [dayId], references: [id])
  dayId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Weight {
  id     Int   @id @default(autoincrement())
  weight Float
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int   @unique
}

// Define the OTP model
model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime // Use dbgenerated for database-specific expressions
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}
